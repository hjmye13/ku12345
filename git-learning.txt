台式机用户名：Ye13  邮箱：137
笔记本用户名：

创建用户名和邮箱：
git config --global user.name "Your Name"
git config --global user.email "email@example.com"

查看用户名和邮箱：
$ git config user.name
$ git config user.email

# 查看目前全局git配置信息
git config -l

把这个目录变成Git可以管理的仓库：
$ git init

mkdir 
cd

添加和提交文件
$ git add readme.txt
$ git commit -m "wrote a readme file"

查看每一次改动日志
git log （--pretty=oneline）

退回上一个版本
$ git reset --hard HEAD^
内容：
$ cat readme.txt
回到指定版本：
$ git reset --hard 1094a
Git提供了一个命令git reflog用来记录你的每一次命令
$ git reflog
查看当前状态：
$ git status

撤销修改：
1.自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态
2.一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
git checkout -- readme.txt
3.不但写了一些胡话，还git add到暂存区了：
git reset HEAD <file>
可以把暂存区的修改撤销掉（unstage），重新放回工作区：
然后git checkout -- readme.txt

先手动删除文件，再
git rm 或git add一样，否则只能git rm
git commit
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本
$ git checkout -- test.txt

远程仓库：
创建ssh key
$ ssh-keygen -t rsa -C "1371870154@qq.com"
在用户主目录下的.SSH文件夹中id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

将github与本地库关联：
$ git remote add origin git@github.com:hjmye13/ku12345.git
把本地库的所有内容推送到远程库上：
$ git push -u origin master

从现在起，只要本地作了提交，就可以通过命令：
$ git push origin master

删除远程库
$ git remote -v或$ git remote rm origin
用命令git clone克隆一个本地库：
$ git clone git@github.com:hjmye13/ku12345.git （非开放http端口的公司内部）

分支管理：
首先，我们创建dev分支，然后切换到dev分支：
$ git checkout -b dev
相当于：$ git branch dev + $ git checkout dev
用git branch命令查看当前分支：
在dev分支修改文件add + commit
然后切换回master分支$ git checkout master
把dev分支的工作成果合并到master分支上：用于合并指定分支到当前分支
$ git merge dev
合并完成后，就可以放心地删除dev分支了：
$ git branch -d dev  （-D）强制删除
切换分支：
$ git switch -c feature1
$ git switch master


冲突：
当分别对两条分支的文件修改后，merge，产生冲突，需要手动修改文件内容然后冲洗提交，再删除分支。
分支合并图：
$ git log --graph --pretty=oneline --abbrev-commit

准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：可以看到分支历史。
$ git merge --no-ff -m "merge with no-ff" dev

bug修复：
dev分支上：
$ git stash保存工作现场。
假定需要在master分支上修复，就从master创建临时分支：
$ git checkout master
$ git checkout -b issue-101
$ git add readme.txt 
$ git commit -m "fix bug 101"
$ git switch master
$ git merge --no-ff -m "merged bug fix 101" issue-101
$ git switch dev
$ git status
$ git stash list
一是用git stash apply stash@{0}
恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了：

同样的bug，要在dev上修复，Git专门提供了一个cherry-pick命令，让我们能复制一个特定的提交到当前分支：
$ git cherry-pick 4c805e2

多人协作：
要查看远程库的信息，用$ git remote (-v)
抓取分支：







